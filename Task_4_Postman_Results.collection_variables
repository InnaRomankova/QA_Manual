{
	"info": {
		"_postman_id": "3925b0ac-a435-4772-ad67-613237b40d26",
		"name": "Task_4_Postman_Results",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Приходящий токен необходимо передать во все остальные запросы\r",
							"\r",
							"pm.test(\"Set token into Environment Variable\", function () {\r",
							"   let jsonData = JSON.parse(responseBody);\r",
							"   postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Ina",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка: Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе\r",
							"let schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"};\r",
							"pm.test(\"Json Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							" let jsonData = pm.response.json();\r",
							" salary = jsonData.person.u_name[1];\r",
							" console.log(salary)\r",
							"\r",
							"pm.test(\"Check start_qa_salary : salary\", function () {\r",
							"   pm.expect(jsonData.start_qa_salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_6_months : salary*2\", function () {\r",
							"   pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_12_months : salary*2.9\", function () {\r",
							"   pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year : salary*4\", function () {\r",
							"   pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary*4);\r",
							"});\r",
							"\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.collectionVariables.set(\"u_salary_1.5_year\",jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\":\"28\",\r\n    \"salary\":\"1000\",\r\n    \"name\":\"Lera\",\r\n    \"auth_token\":\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"let schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"};\r",
							"pm.test(\"Json Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}); \r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var jsonData = pm.response.json();\r",
							"salary = jsonData.salary[0];\r",
							"console.log(salary);\r",
							"pm.test(\"Check salary[1]=salary*2\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(\"\"+salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary[2]=salary*3\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(\"\"+salary*3);\r",
							"});\r",
							"\r",
							"// проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"salary_1 = jsonData.salary[1];\r",
							"salary_2 = jsonData.salary[2];\r",
							"let result = false;\r",
							"if ((salary_2>salary_1)&(salary_2>salary)){\r",
							"result = true;\r",
							"};\r",
							"pm.test(\"Check salary[2]>salary[1]&salary[2]>salary[0]\", function () {\r",
							"    pm.expect(result).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Slava",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"let schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"};\r",
							"pm.test(\"Json Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//  В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Check daily_food = weight*0.012\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(pm.collectionVariables.get(\"weight_Liza\")*0.012);\r",
							"});\r",
							"pm.test(\"Check daily_sleep = weight*2.5\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(pm.collectionVariables.get(\"weight_Liza\")*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight_Liza}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Liza",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"};\r",
							"pm.test(\"Json Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// Проверить что занчение поля name = значению переменной name из окружения\r",
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Check field name = collectionVariables name_Mila\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"name_Mila\"));\r",
							"});\r",
							"\r",
							"// Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"Check field age = collectionVariables age_Mila\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(pm.collectionVariables.get(\"age_Mila\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age_Mila}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name_Mila}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Можете взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"pm.test(\"Get Cur_ID value from response and set into collectionVariables\", function () {\r",
							"let array_currencies = pm.response.json();\r",
							"//console.log(array_currencies);\r",
							"let array_length = array_currencies.length;\r",
							"console.log(\"Length of array: \" + array_length);\r",
							"\r",
							"function getRandomArbitrary (min,max) {\r",
							"    return Math.random()*(max-min)+min;\r",
							"    }\r",
							"\r",
							"let random_index = Math.trunc(getRandomArbitrary(0,(array_length-1)));\r",
							"console.log(\"Choose random index of array: \" + random_index);  \r",
							"\r",
							"console.log(\"Print in console object with index \" + random_index + \": \")\r",
							"console.log(array_currencies[random_index]);\r",
							"\r",
							"let Cur_ID_value = array_currencies[random_index].Cur_ID;\r",
							"console.log(\"Cur_ID value: \"+ Cur_ID_value);\r",
							"pm.collectionVariables.set(\"Cur_ID\", Cur_ID_value);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "8_extra_task_part_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ЗАДАНИЕ:\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"//{\r",
							"//    \"Cur_Abbreviation\": str\r",
							"//    \"Cur_ID\": int,\r",
							"//    \"Cur_Name\": str,\r",
							"//    \"Cur_OfficialRate\": float,\r",
							"//    \"Cur_Scale\": int,\r",
							"//    \"Date\": str\r",
							"//}\r",
							"// 7) переходим к следующей итерации\r",
							"\r",
							"\r",
							"// Полученные данные сохраняем в формате json в переменную array_currencies: \r",
							"let array_currencies = pm.response.json();\r",
							"\r",
							"let arr = [];\r",
							"// Итеририруем список валют и сохраняем значения Cur_ID в массив:\r",
							" array_currencies.forEach(function(e){\r",
							"     arr.push(e.Cur_ID);\r",
							"     //console.log(Cur_ID);\r",
							"});\r",
							"//console.log(arr);\r",
							"pm.collectionVariables.set(\"array_Cur_ID\",arr);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "8_extra_task_part_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let array_currency_ID = [];\r",
							"array_currency_ID = pm.collectionVariables.get(\"array_Cur_ID\");\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    if(pm.response.to.have.status(200)){\r",
							"        let jsonData = pm.response.json();\r",
							"        if (jsonData.Cur_OfficialRate !=0){\r",
							"            console.log(jsonData);\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Iteration condition\", function(){\r",
							"    if(array_currency_ID.length != 0){\r",
							"        array_currency_ID.splice(0,1);\r",
							"        pm.collectionVariables.set(\"array_Cur_ID\", array_currency_ID);\r",
							"        console.log(array_currency_ID);\r",
							"    }else{\r",
							"        postman.setNextRequest(null);  \r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let array_Cur_ID = [];\r",
							"array_Cur_ID = pm.collectionVariables.get(\"array_Cur_ID\");\r",
							"let Cur_ID = array_Cur_ID[0];\r",
							"console.log(Cur_ID);\r",
							"pm.collectionVariables.set(\"Cur_ID\",Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "8_extra_task_part_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"postman.setNextRequest(\"8_extra_task_part_2\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "u_salary_1.5_year",
			"value": ""
		},
		{
			"key": "weight_Liza",
			"value": ""
		},
		{
			"key": "name_Mila",
			"value": ""
		},
		{
			"key": "age_Mila",
			"value": ""
		},
		{
			"key": "array_Cur_ID",
			"value": ""
		},
		{
			"key": "Cur_ID",
			"value": ""
		}
	]
}